{"version":3,"sources":["components/Search.js","config.js","components/Dashboard.js","components/CityDetailTemp.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","useState","searchTag","setSearchTag","className","onSubmit","e","preventDefault","history","push","type","name","placeholder","onChange","target","value","API_KEY","Dashboard","getTemp","a","cities","Promise","all","map","city","fetch","api_key","then","res","json","data","console","log","setState","state","this","citiesData","index","location","region","text","current","condition","temp_f","to","key","Component","CityDetailTemp","alert","forecast","country","comma","error","match","params","id","response","status","ok","errorMessage","statusText","Error","forecastday","catch","message","days","icon","day","avgtemp_f","date","replace","tday","Date","getDay","src","alt","App","exact","path","component","href","title","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1625d0fb.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst Search = (props) => {\n\n    const [searchTag, setSearchTag] = useState('');\n\n    const handleSubmit = (e) => {\n      e.preventDefault();\n\n      if(searchTag){\n        props.history.push(`/${searchTag}`);\n      }\n    }\n\n    return (\n      <div className=\"search\">\n        <form onSubmit={handleSubmit}>\n          <input type=\"search\" name=\"search\" placeholder=\"city, state\" onChange={(e) => setSearchTag(e.target.value)}/>\n          <button>Search</button>\n        </form>\n      </div>\n    );\n}\n\nexport default Search;\n","const API_KEY = '3d1dc2eeb6e2429bbfb140358202407';\nexport default API_KEY;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Search from './Search';\nimport '../App.css';\nimport api_key from '../config';\n\nexport default class Dashboard extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      cities: []\n    }\n  }\n\n  componentDidMount(){\n    this.getTemp();\n  }\n\n\n  getTemp = async () => {\n    const cities = ['boston, ma', 'chicago, il', 'houston, tx', 'las vegas, nv', 'los angeles, ca', 'miami, fl', 'new york, ny', 'san diego, ca', 'seattle, wa'];\n\n    let data = await Promise.all(\n      cities.map(city => {\n        return fetch(`https://api.weatherapi.com/v1/current.json?key=${api_key}&q=${city}`).then(res => res.json())\n      })\n    );\n\n    console.log(data);\n\n    this.setState({\n      cities: data\n    })\n  }\n\n\n  render(){\n\n  console.log(this.state.cities);\n\n  const citiesData = this.state.cities.map((city, index) => {\n   const { name, region } = city.location;\n   const { text } = city.current.condition;\n   const { temp_f } = city.current;\n\n    return (\n      <Link to={name} className=\"card\" key={index}>\n        <p>{name + \", \" + region}</p>\n        <div className=\"temp\">\n          <li>{text}</li>\n          <li>{temp_f}˚F</li>\n        </div>\n      </Link>\n    )\n  })\n\n\n    return (\n      <div className=\"container\">\n        <div className=\"container-main\">\n          <h1>Today's Weather</h1>\n\n          <Search history ={this.props.history} />\n\n          <div className=\"cards-container\">\n            {citiesData}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport api_key from '../config';\n\nexport default class CityDetailTemp extends Component {\n  constructor(){\n    super()\n    this.state = {\n      alert: {},\n      current: {},\n      condition: {},\n      forecast: [],\n      location: {\n        name: '',\n        country: '',\n        region: ''\n      },\n      comma: '',\n      error: false\n    }\n  }\n\n\n  // componentDidUnmount() {\n  //   this.setState({\n  //     ...this.state,\n  //     error: false\n  //   })\n  // }\n\n  componentDidMount(){\n    let city = this.props.match.params.id;\n    fetch(`https://api.weatherapi.com/v1/forecast.json?key=${api_key}&q=${city}&days=7`)\n      .then(response => {\n        if(response.status >= 400 && response.status <= 500) {\n          this.setState({\n            ...this.state,\n            error: true\n          })\n        } else if (response.ok) {\n          return response;\n        } else {\n          let errorMessage = `${response.status} (${response.statusText})`\n          const error = new Error(errorMessage);\n          throw(error);\n        }\n      })\n      .then(res => res.json())\n      .then(data => {\n        this.setState({\n          alert: data.alert,\n          current: data.current,\n          condition: data.current.condition,\n          forecast: data.forecast.forecastday,\n          location: data.location,\n          comma: ', '\n        })\n      })\n      .catch(error => console.error(`Error in fetch: ${error.message}`))\n  }\n\n\n  render(){\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const { name, region, country } = this.state.location;\n    const { temp_f } = this.state.current;\n    const { icon, text } = this.state.condition;\n    const { comma } = this.state;\n\n\n    const forecast = this.state.forecast.map((day, index) => {\n      const { avgtemp_f } = day.day;\n      const { icon, text } = day.day.condition;\n      const date = day.date.replace(\"2020-\", \"\");\n      const tday = new Date(day.date).getDay();\n\n\n      return (\n        <div className=\"card-temp\" key={index} >\n          {days[tday]} {date} <br/><br/>\n          Temp: {avgtemp_f}˚F <br/>\n          <div className=\"forcast-cards\">\n            <img src={icon} alt=\"\"/>\n            <div>\n              <span>{text}</span>\n            </div>\n          </div>\n        </div>\n      )\n    })\n\n    console.log(this.state);\n\n    return (\n      <div className=\"container\">\n        <Link to={'/'} className=\"card\">\n        Back\n        </Link>\n\n        <div className=\"container-main\">\n          { this.state.error ?\n            <>\n            <h1>City location not found </h1>\n            <img className=\"error\" src={\"https://www.flaticon.com/premium-icon/icons/svg/3296/3296271.svg\"} alt=\"\"/>\n            </>\n            :\n            <>\n              {country === \"United States of America\" ?\n                <h1>{name + comma + region}</h1>\n                :\n                <h1>{name + comma + country}</h1>\n              }\n\n              <div className=\"current-weather\">\n                <h3>Current Weater</h3>\n                <div className=\"current-weather-main\">\n                  <div className=\"current-weather-image\">\n                    <img src={icon} alt=\"\"/> <span>{text}</span>\n                  </div>\n                  <div className=\"current-weather-info\">\n                  Temperature: {temp_f}˚F\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"daily-temp-container\">\n                { country ?\n                  forecast\n                  :\n                  <h3> Loading forecast... </h3>\n                }\n              </div>\n            </>\n          }\n        </div>\n\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Dashboard from './components/Dashboard'\nimport CityDetailTemp from './components/CityDetailTemp'\n// import NotFound from './components/NotFound';\n\n\nclass App extends Component {\n\nrender(){\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route exact path=\"/\" component={Dashboard} />\n          <Route exact path=\"/:id\" component={CityDetailTemp} />\n        </Switch>\n        <div className=\"api-ref\">Powered by <a href=\"https://www.weatherapi.com/\" title=\"Free Weather API\">WeatherAPI.com</a></div>\n      </div>\n    </Router>\n  )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}